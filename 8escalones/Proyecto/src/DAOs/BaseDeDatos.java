package DAOs;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

//Singleton
public class BaseDeDatos {
    private static Connection connection;
    private static BaseDeDatos bd;
    private String url = "jdbc:postgresql://localhost/"; // SI LO VAN A USAR TIENEN Q CAMBIAR LOS DATOS CON SU COMPU
    private String nombre = "8Escalones";
    private String usuario = "postgres";
    private String clave = "1234";

    private BaseDeDatos() {
        try {
            Class.forName("org.postgresql.Driver");
            this.setConnection(DriverManager.getConnection(url + nombre, usuario, clave));
        } catch (ClassNotFoundException e) {
            System.err.println("no se encontr√≥ el driver de PostgreSQL.");
            e.printStackTrace();
        } catch (SQLException e) {
            System.err.println("no se pudo conectar a la base de datos.");
            e.printStackTrace();
        }
    }

    public static BaseDeDatos obtenerInstancia() {
        if (bd == null) {
            bd = new BaseDeDatos();
        }
        return bd;
    }

    private void setConnection(Connection connection) {
        this.connection = connection;
    }

    public ResultSet query(PreparedStatement querysStatement) {
        ResultSet rs = null;
        try {
            rs = querysStatement.executeQuery();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return rs;
    }

    public Boolean insert(String query) {
        try {
            Statement statement = getConnection().createStatement();
            // executeUpdate es para realizar insert, update o delete, esto devuelve 1
            int res1 = statement.executeUpdate(query);
            if (res1 == 1) {
                return true;
            }
            return false;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    public Connection getConnection() {
        return connection;
    }

    public static PreparedStatement prepareStatement(String query) throws SQLException {
        return connection.prepareStatement(query);
    }

    public static PreparedStatement prepareStatement(String query, int autoGeneratedKeys) throws SQLException {
        return connection.prepareStatement(query, autoGeneratedKeys);
    }
}
