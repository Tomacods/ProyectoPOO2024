//EJEMPLO ESTRATEGIA DE PAGO
//SE INSTANCIA UNA ESTRATEGIA Y SE LA DA AL CONTEXTO, EL CONTEXTO EXPONE UN SET DE LA ESTRATEGIA PARA QUE PUEDA SER MODIFICADA.
public class App {
    public static void main(String[] args) throws Exception {
        Contexto tienda = new Contexto(); //CREO UN CONTEXTO
        tienda.setEstrategiaDePago(new EstrategiaConcretaB("1234 5678 9876 5432", "Juan Pérez")); //SETEO LA ESTRATEGIA CONCRETA
        tienda.pagar(100.0); //REALIZO PAGO UTILIZANDO LA ESTRATEGIA DEFINIDA

        System.out.println();

        // Usar la estrategia de pago con Debito
        tienda.setEstrategiaDePago(new EstrategiaConcretaA("juan.perez@example.com"));//SETEO LA ESTRATEGIA CONCRETA
        tienda.pagar(150.0); //REALIZO PAGO UTILIZANDO LA ESTRATEGIA DEFINIDA

        System.out.println();

        // Usar la estrategia de pago con Bitcoin
        tienda.setEstrategiaDePago(new EstrategiaConcretaC("direccion-de-wallet"));//SETEO LA ESTRATEGIA CONCRETA
        tienda.pagar(200.0); //REALIZO PAGO UTILIZANDO LA ESTRATEGIA DEFINIDA
    }

    //USAR CUANDO:
    //MUCHAS CLASES RELACIONADAS SOLO DIFIEREN EN SU COMPORTAMIENTO, STRATEGY PROVEE UNA FORMA DE CONFIGURAR UNA CLASE
    //CON MUCHOS COMPORTAMIENTOS.

    //SE NECESITA DIFERENTES VARIANTES DE UN ALGORITMO.

    //UN ALGORITMO USA INFORMACIÓN QUE EL CLIENTE NO DEBERÍA VER. PARA EVITAR EXPONER ESTRUCTURAS DE DATOS COMPLEJAS

    //Y ESPECÍFICAS DEL ALGORITMO.UNA CLASE DEFINE MUCHOS COMPORTAMIENTOS Y APARECEN COMO MÚTIPLES CONDICIONALES.
    //SI ESTO APARECE CAMBIAR LOS MULTIPLES IF POR CLASES QUE IMPLEMENTAN CADA UNA DE LAS ESTRATEGIAS

}
